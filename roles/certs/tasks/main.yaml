- name: Include GCP facts gathering role
  include_role:
    name: gcp_facts

- name: Create folder for certificates on all hosts
  file:
    path: ~/certs/
    mode: '0755'
    state: directory
   
- name: Copy all cfssl configuration templates
  template:
    src: "{{ item }}.j2"
    dest: /tmp/{{ item }}
    mode: 0755
  loop: "{{ cfssl_templates|flatten(levels=1) }}"
  when: inventory_hostname == controller_nodes[0]

- name: Generate all k8s certificates and private keys
  block:
    - name: Generate CA cert and config file
      shell:  >
              cd ~/certs/ && cfssl gencert -initca /tmp/ca-csr.json |
              cfssljson -bare ca 
  
    - name: Generate admin user cert and private key
      shell:  >
              cd ~/certs/ && cfssl gencert -ca=ca.pem
              -ca-key=ca-key.pem -config=/tmp/ca-config.json
              -profile=kubernetes
              /tmp/admin-csr.json | cfssljson -bare admin


    - name: Generate kube* managers certs and private keys
      shell:  >
              cd ~/certs/ && cfssl gencert -ca=ca.pem
              -ca-key=ca-key.pem -config=/tmp/ca-config.json
              -profile=kubernetes
              /tmp/"{{ item }}"-csr.json |
              cfssljson -bare "{{ item }}" 
      loop: "{{ kube_components|flatten(levels=1) }}"

    - name: Generate kube-apiserver cert and private key
      shell:  >
              cd ~/certs/ && cfssl gencert -ca=ca.pem
              -ca-key=ca-key.pem -config=/tmp/ca-config.json
              -profile=kubernetes /tmp/kubernetes-csr.json | 
              cfssljson -bare kubernetes

    - name: Generate Service Account cert and private key
      shell:  >
              cd ~/certs/ && cfssl gencert -ca=ca.pem
              -ca-key=ca-key.pem -config=/tmp/ca-config.json
              -profile=kubernetes
              /tmp/service-account-csr.json |
              cfssljson -bare service-account
  when: inventory_hostname == "controller-0" 

          #          -hostname="{{ item.0 }},{{ item.1 }},{{ item.2 }}"
- name: Generate kubelet cert and private key
  vars:
    host_ip: "{{ gcp_instance_facts|json_query('resources[3:6].networkInterfaces[].networkIP') }}"
    nat_ip:  "{{gcp_instance_facts|json_query('resources[3:6].networkInterfaces[].accessConfigs[].natIP') }}"
    host_names: "{{ gcp_instance_facts|json_query('resources[3:6].name') }}"

  shell:  >
          cd ~/certs/ && cfssl gencert -ca=ca.pem 
          -ca-key=ca-key.pem -config=/tmp/ca-config.json
          -profile=kubernetes
          /tmp/{{ item.2 }}-csr.json | cfssljson -bare {{ item.2 }}
  loop: "{{ host_ip|zip(nat_ip,host_names)|list }}"
  when: inventory_hostname == "controller-0" 
  
- name: Distribute certs between worker nodes
  block:
  - name: Create certs folder
    file:
      path: ~/ansible/temp_folder
      mode: '0755'
      state: directory
    delegate_to: localhost
    run_once: true

  - name: Download certs from controller-0 to temp_folder
    fetch:
      flat: yes
      src: ~/certs/{{ item }}
      dest: ~/ansible/temp_folder/
    loop: "{{ worker_certs|flatten(levels=1) }}"
    when: inventory_hostname == "controller-0"

  - name: Copy worker certs from temp_folder to worker nodes 
    copy:
      src: /Users/maksimrahalevich/ansible/temp_folder/{{ item }}.pem
      dest: ~/certs/{{ item }}.pem
    loop: "{{ worker_nodes|flatten(levels=1) }}" 
    when: inventory_hostname == item

  - name: Copy ca cert from temp_folder to worker nodes
    copy:
      src: /Users/maksimrahalevich/ansible/temp_folder/ca.pem
      dest: ~/certs/ca.pem
    when: inventory_hostname in worker_nodes

  - name: Copy keys from temp_folder to worker nodes 
    copy:
      src: /Users/maksimrahalevich/ansible/temp_folder/{{ item }}-key.pem
      dest: ~/certs/{{ item }}-key.pem
    loop: "{{ worker_nodes|flatten(levels=1) }}"
    when: inventory_hostname == item

  - name: Copy kubelet-related keys to necessary directories  
    vars:
      worker_certs_and_keys:
        - "{{ inventory_hostname }}.pem"
        - "{{ inventory_hostname }}-key.pem"
        - ca.pem
    become: yes
    copy:
      remote_src: yes
      src: /home/maksimrahalevich/certs/{{ item }}
      dest: /var/lib/kubernetes/{{ item }}
    loop: "{{ worker_certs_and_keys }}"
    when: inventory_hostname in worker_nodes 

- name: Distribute certs between controller nodes
  fetch:
    flat: yes
    src: ~/certs/{{ item }}
    dest: ~/ansible/temp_folder/
  when: inventory_hostname == "controller-0"
  with_items: "{{ controller_certs }}"

- copy:
    src: ~/ansible/temp_folder/{{ item }}
    dest: ~/certs/{{ item }}
  when: inventory_hostname in groups.tag_controller
  with_items: "{{ controller_certs }}"
