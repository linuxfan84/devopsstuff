- name: Download and install cfssl on control plane node
  become: yes
  vars:
    cfssl_binary: [ "cfssl","cfssljson" ] 
  get_url:
    url: https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/{{ cfssl_arch }}/{{ item }}
    dest: "/usr/local/bin/"
    mode: 0755
  loop: "{{ cfssl_binary|flatten(levels=1) }}" 
  when: inventory_hostname == "controller-0"

- name: Include kubectl-related variables 
  become: yes
  include_vars:
    file: all.yaml

- name: Download kubectl
  get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/darwin/amd64/kubectl"
    dest: "/usr/local/bin/"
    mode: 0755
  delegate_to: localhost
  run_once: true

- name: Install k8s control plane components
  block:
    - name: Create etcd-related folders
      vars:
        etcd_folders: [ "/etc/etcd", "/var/lib/etcd" ]
      become: yes
      file:
        path: "{{ item }}"
        state: directory 
        mode: 0775
      loop: "{{ etcd_folders|flatten(levels=1) }}"

    - name: Create temp etcd folder
      file:
        path: "{{ home_dir }}/etcd_temp" 
        state: directory
        mode: 0755

    - name: Download etcd 
      get_url:
        url: https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version }}/etcd-v{{ etcd_version }}-linux-amd64.tar.gz
        dest: "{{ home_dir }}/etcd_temp/"
        mode: 0755

    - name: Unarchive etcd 
      unarchive:
        remote_src: yes
        src: "{{ home_dir }}/etcd_temp/etcd-v{{ etcd_version }}-linux-amd64.tar.gz"
        dest: "{{ home_dir }}/etcd_temp/"
        extra_opts:
          - --warning=no-unknown-keyword

    - name: Install etcd
      vars:
        etcd_files: [ "etcd", "etcdctl" ] 
      become: yes 
      copy:
        remote_src: yes
        src: "{{ home_dir }}/etcd_temp/etcd-v{{ etcd_version }}-linux-amd64/{{ item }}"
        dest: /usr/local/bin/
        mode: 0755
      loop: "{{ etcd_files|flatten(levels=1) }}"

    - name: Install kube-apiserver,controller-manager,scheduler components
      become: yes
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v{{ kube_components_version }}/bin/linux/amd64/{{ item }}
        dest: /usr/local/bin/
        mode: 0755
      loop: "{{ kube_components|flatten(levels=1) }}"
  when: inventory_hostname in controller_nodes

- name: Install k8s components on worker nodes
  block:
    - name: Create temp folder for runtime and cni binaries
      file:
        path: "{{ home_dir }}/k8s_temp"
        state: directory
        mode: 0755

    - name: Download above binaries
      get_url:
        url: "{{ item }}"
        dest: "{{ home_dir }}/k8s_temp" 
        mode: 0755
      loop: "{{ container_cni_urls|flatten(levels=1) }}"

    - name: Create necessary folders
      file:
        path: "{{ item }}"
        state: directory
        mode: '0775'
      loop: "{{ kube_dirs|flatten(levels=1) }}"
      vars:
        kube_dirs:
          - "/etc/cni/net.d"
          - "/etc/containerd"
          - "/opt/cni/bin"
          - "/var/lib/kubelet"
          - "/var/lib/kube-proxy"
          - "/var/lib/kubernetes"
          - "/var/run/kubernetes"

    - name: Unarchive cni binaries
      unarchive:
        remote_src: yes
        src: "{{ home_dir }}/k8s_temp/{{ cni_binaries }}"
        dest: /opt/cni/bin

    - name: Unarchive crictl binaries
      unarchive:
        remote_src: yes
        src: "{{ home_dir }}/k8s_temp/{{ container_binaries[0] }}"
        dest: /usr/local/bin/

    - name: Unarchive containerd binaries
      unarchive:
        remote_src: yes
        src: "{{ home_dir }}/k8s_temp/{{ container_binaries[1] }}"
        dest: /bin/
        extra_opts:
          - --strip-components=1
          - --show-transformed-names

    - name: Copy runc binary file
      get_url: 
        url: "https://github.com/opencontainers/runc/releases/download/v1.0.0-rc8/runc.amd64"
        dest: /usr/local/bin/runc
        mode: 0755

    - name: Install k8s binaries
      vars:
        k8s_worker_binaries:
          - "kube-proxy"
          - "kubelet"
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v{{ kube_components_version }}/bin/linux/amd64/{{ item }}
        dest: /usr/local/bin/
        mode: 0755
      loop: "{{ k8s_worker_binaries|flatten(levels=1) }}"
  become: yes
  when: inventory_hostname in worker_nodes
